name: PR

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

env:
  GCP_REGION: europe-west2
  TAGGED_DOCKER_IMAGE_NAME: europe-west2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/skill-arcade/backend:pr-${{ github.event.pull_request.number }}
  GCP_CLOUDRUN_NAME: backend-pr-${{ github.event.pull_request.number }}

permissions:
  contents: "read"
  id-token: "write"
  pull-requests: "write"
  checks: "write"

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.action != 'closed' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ID Changed Files
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - "website/backend/**"
            frontend:
              - "website/frontend/**"

      - name: Google Cloud Auth
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Google Cloud SDK Init
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Google Cloud Docker Auth
        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' || steps.filter.outputs.backend == 'true' }}
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Docker Build
        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' || steps.filter.outputs.backend == 'true' }}
        run: |
          docker build --platform linux/amd64 -t "${{ env.TAGGED_DOCKER_IMAGE_NAME }}" .
        working-directory: ./website/backend

      - name: Google Cloud Artifacts Delete Current
        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' || steps.filter.outputs.backend == 'true' }}
        run: |
          if gcloud artifacts docker images describe \
              ${{ env.TAGGED_DOCKER_IMAGE_NAME }} >/dev/null 2>&1; then
            gcloud artifacts docker images delete \
              ${{ env.TAGGED_DOCKER_IMAGE_NAME }}
          else
            echo "Image does not exist, skipping deletion."
          fi

      - name: Google Cloud Artifacts Push
        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' || steps.filter.outputs.backend == 'true' }}
        run: |
          docker push "${{ env.TAGGED_DOCKER_IMAGE_NAME }}"
        working-directory: ./website/backend

      - name: Prepare Environment File
        env:
          FIREBASE_CREDENTIALS_JSON: ${{ secrets.FIREBASE_CREDENTIALS }}
          SECRET_UPLOADER_NUM_WORKERS: ${{ secrets.UPLOADER_NUM_WORKERS }}
          SECRET_GCP_BUCKET_NAME: ${{ secrets.GCP_BUCKET_NAME }}
          SECRET_GCP_SQL_CONNECTION_NAME: ${{ secrets.GCP_SQL_CONNECTION_NAME }}
          SECRET_GCP_SQL_USER: ${{ secrets.GCP_SQL_USER }}
          SECRET_GCP_SQL_PASSWORD: ${{ secrets.GCP_SQL_PASSWORD }}
          SECRET_GCP_SQL_NAME: ${{ secrets.GCP_SQL_NAME }}
        run: |
          echo "Writing FIREBASE_CREDENTIALS to env.yaml..."
          echo "FIREBASE_CREDENTIALS: |" > env.yaml
          echo "$FIREBASE_CREDENTIALS_JSON" | sed 's/^/  /' >> env.yaml

          echo "Appending other secrets to env.yaml..."
          echo "UPLOADER_NUM_WORKERS: $SECRET_UPLOADER_NUM_WORKERS" >> env.yaml
          echo "GCP_BUCKET_NAME: $SECRET_GCP_BUCKET_NAME" >> env.yaml
          echo "GCP_SQL_CONNECTION_NAME: $SECRET_GCP_SQL_CONNECTION_NAME" >> env.yaml
          echo "GCP_SQL_USER: $SECRET_GCP_SQL_USER" >> env.yaml
          echo "GCP_SQL_PASSWORD: $SECRET_GCP_SQL_PASSWORD" >> env.yaml
          echo "GCP_SQL_NAME: $SECRET_GCP_SQL_NAME" >> env.yaml

          echo "env.yaml created successfully."
          cat env.yaml

      - name: Google Cloud Run Deploy
        if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' || steps.filter.outputs.backend == 'true' }}
        run: |
          gcloud run deploy "${{ env.GCP_CLOUDRUN_NAME }}" \
          --image="${{ env.TAGGED_DOCKER_IMAGE_NAME }}" \
          --region="${{ env.GCP_REGION }}" \
          --platform=managed \
          --allow-unauthenticated \
          --env-vars-file=env.yaml > /dev/null

      - name: Google Cloud Run Service URL
        id: url
        run: |
          URL=$(gcloud run services describe ${{ env.GCP_CLOUDRUN_NAME }} --platform managed --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          WS_URL="wss://${URL#https://}"
          echo "::add-mask::$URL"
          echo "::add-mask::$WS_URL"
          echo "api_url=$URL" >> $GITHUB_OUTPUT
          echo "ws_url=$WS_URL" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          npm ci && npm run build
        env:
          VITE_API_URL: ${{ steps.url.outputs.api_url }}
          VITE_WS_URL: ${{ steps.url.outputs.ws_url }}
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}
        working-directory: ./website/frontend

      - name: Firebase Hosting Deploy
        id: deploy_hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: pr-${{ github.event.pull_request.number }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          entryPoint: ./website/frontend

  cleanup:
    if: ${{ github.event.action == 'closed' }}
    runs-on: ubuntu-latest

    steps:
      - name: Google Cloud Auth
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Google Cloud SDK Init
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Google Cloud Run Delete
        run: |
          gcloud run services delete ${{ env.GCP_CLOUDRUN_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --quiet \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Google Cloud Artifacts Delete
        run: |
          gcloud artifacts docker images delete \
          ${{ env.TAGGED_DOCKER_IMAGE_NAME }}
