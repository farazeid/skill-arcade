name: PR

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

env:
  GCP_REGION: europe-west2

permissions:
  contents: "read"
  id-token: "write"
  pull-requests: "write"
  checks: "write"

jobs:
  file_changes:
    runs-on: ubuntu-latest

    outputs:
      backend_changed: ${{ steps.filter.outputs.backend == 'true' }}
      frontend_changed: ${{ steps.filter.outputs.frontend == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ID Changed Files
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - "backend/**"
            frontend:
              - "frontend/**"

  deploy_backend:
    needs: file_changes
    if: ${{ github.event.action != 'closed' && github.event.pull_request.head.repo.full_name == github.repository && needs.file_changes.outputs.backend_changed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Google Cloud SDK Init
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Google Cloud Docker Auth
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Google Cloud Artifacts Delete Current
        run: |
          gcloud artifacts docker images delete \
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/skill-arcade/backend:pr-${{ github.event.pull_request.number }} \
            --delete-tags \
            --quiet

      - name: Docker Build & Google Cloud Artifacts Push
        run: |
          docker build --platform linux/amd64 -t "${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/skill-arcade/backend:pr-${{ github.event.pull_request.number }}" .
          docker push "${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/skill-arcade/backend:pr-${{ github.event.pull_request.number }}"
        working-directory: ./backend

      - name: Google Cloud Run Deploy
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: skill-arcade-backend-pr-${{ github.event.pull_request.number }}
          image: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/skill-arcade/backend:pr-${{ github.event.pull_request.number }}
          region: ${{ env.GCP_REGION }}

  deploy_frontend:
    needs: [file_changes, deploy_backend]
    if: ${{ always() && github.event.action != 'closed' && github.event.pull_request.head.repo.full_name == github.repository && (needs.file_changes.outputs.frontend_changed == 'true' || needs.file_changes.outputs.backend_changed == 'true') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Google Cloud SDK Init
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Google Cloud Run Service URL
        id: url
        run: |
          URL=$(gcloud run services describe skill-arcade-backend-pr-${{ github.event.pull_request.number }} --platform managed --region ${{ env.GCP_REGION }} --format 'value(status.url)')
          echo "api_url=$URL" >> $GITHUB_OUTPUT
          WS_URL="ws://${URL#https://}"
          echo "ws_url=$WS_URL" >> $GITHUB_OUTPUT

      - name: Build
        run: |
          npm ci && npm run build
          echo ${{ steps.url.outputs.api_url }}
          echo ${{ steps.url.outputs.ws_url }}
        env:
          VITE_API_URL: ${{ steps.url.outputs.api_url }}
          VITE_WS_URL: ${{ steps.url.outputs.ws_url }}
        working-directory: ./frontend

      - name: Firebase Hosting Deploy
        id: deploy_hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: pr-${{ github.event.pull_request.number }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          entryPoint: ./frontend

  cleanup_backend:
    needs: file_changes
    if: ${{ github.event.action == 'closed' && github.event.pull_request.head.repo.full_name == github.repository && needs.file_changes.outputs.backend_changed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Authenticate to Google Cloud
        id: auth
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Google Cloud SDK Init
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Google Cloud Run Delete
        run: |
          gcloud run services delete skill-arcade-backend-pr-${{ github.event.pull_request.number }} \
            --region=${{ env.GCP_REGION }} \
            --quiet \
            --project=${{ secrets.GCP_PROJECT_ID }}

      - name: Google Cloud Artifacts Delete
        run: |
          gcloud artifacts docker images delete \
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/skill-arcade/backend:pr-${{ github.event.pull_request.number }} \
            --delete-tags \
            --quiet

  cleanup_frontend:
    needs: file_changes
    if: ${{ github.event.action == 'closed' && github.event.pull_request.head.repo.full_name == github.repository && (needs.file_changes.outputs.frontend_changed == 'true' || needs.file_changes.outputs.backend_changed == 'true') }}
    runs-on: ubuntu-latest

    steps:
      - name: Firebase Hosting Delete
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: pr-${{ github.event.pull_request.number }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
          expires: 1m
